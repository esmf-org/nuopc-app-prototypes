README for asynchronous I/O with non-blocking behavior NUOPC prototype
----------------------------------------------------------------------

Show how data from a model component can be written to disk via an asynchronous
I/O component. In this implementation the driver will not block the next time
step of the model component, unless the _previous_ data exchange with the I/O
component has not yet finished.

Description:

  A one-way coupled system with a single driver (asyncIODriver), a model
  component, and an I/O component.

  The driver reads a config file to construct the petLists when adding the two
  model and I/O components.

  The driver component uses the default run sequence.
  
  A specialized connector component is explicitly added by the driver.
  
  The specialized connector implements a non-blocking send side of the
  data exchange between model component and I/O component.
  
  The model component uses a simple two-phase initialization, consisting of
  advertise and realize.
  
  The I/O component uses a four-phase initialization, consisting of 
  advertise, receive-DistGrid, accept-Grid, and realize.
  

Build:
  - Set environment variable ESMFMKFILE to point to the esmf.mk of your ESMF
    installation.
  - gmake
  
Execution:
  - Optionally set environment variable ESMF_RUNTIME_COMPLIANCECHECK to ON.
  - mpirun -np X ./esmApp (where X is the total number of PETs, typically 4)
  
Output:
  - PET*.Log files containing compliance checker output if turned on.
  - The prototype outputs time stepping information to stdout.

Code structure:
  - Makefile    - Makefile that is based on the standard esmf.mk mechanism.
  - io.F90      - The I/O component, specializing generic NUOPC_Model.
  - model.F90   - The model component, specializing generic NUOPC_Model.
  - conn.F90    - The connector component, specializing generic NUOPC_Connector.
  - asyncIODriver.F90 - The driver component, specializing generic NUOPC_Driver.
  - asyncIOApp.F90    - Main application.
