README for ATM-OCN Select NUOPC prototype
-----------------------------------------

Demonstrate component selection at build-time and at run-time.

Description:
  
  This prototype code demonstrates how selection between alternative component
  options is handled in code that uses the NUOPC Layer. The two basic selection
  mechanisms are:
  1) compile-time selection, e.g. via pre-processor macros
  2) run-time selection, e.g. via configuration file attribute
  Both mechanisms are supported, and can be mixed.
    
  Here the esm.F90 code is where the selection occurs between atmA and atmB,
  as well as between ocnA and ocnB. 
  
  * Selection between atmA and atmB is purely a compile-time selection based
    on a macros. The code switches the atmSS association according to macros
    WITH_ATM_A and WITH_ATM_B. The preprocessor conditionals used ensure that
    these two options are mutually execlusive, and that exactly one of these
    options is provided, or else the code will bail out during compilation.
    
  * Selection between ocnA and ocnB is a combined compile-time and run-time based
    selection. During build time the macros WITH_OCN_A and WITH_OCN_B determine
    which options will be available during run-time. Then during run-time an
    attribute is read from a configuration file and the actual selection between
    ocnA and ocnB is made. An error code is issued if the selection is not 
    available at run-time, e.g. because it was not built into the code during
    compile-time.
    
  * The Makefile contains code that sets the WITH_ATM_A, WITH_ATM_B, WITH_OCN_A,
    and WITH_OCN_B macros by analyzing the ATM and OCN variables passed into 
    make. So for instance building with "gmake ATM=A OCN=A,B" will build an
    executable that has ATM-A, OCN-A and OCN-B compiled in.

  This prototype code demonstrates that there is generally no need for 
  component wrappers or stubs in codes that use the NUOPC Layer. Instead the
  flexibility to select actual component instantiation either during 
  compile-time and/or run-time is best implemented using standard constructs
  within the driver layer. The prototype shows a robust implementation that
  catches configuration conflicts at the earliest stage.

Build:
  - Set environment variable ESMFMKFILE to point to the esmf.mk of your ESMF
    installation.
  - gmake ATM=A OCN=A,B  (or other ATM, OCN settings, see description below)
  
Execution:
  - Optionally set environment variable ESMF_RUNTIME_COMPLIANCECHECK to ON.
  - mpirun -np X ./esmApp (where X is the total number of PETs, typically 4)
  
Output:
  - PET*.Log files containing compliance checker output if turned on.
  - The prototype outputs time stepping information to stdout.
  
Code structure:
  - Makefile    - Makefile that is based on the standard esmf.mk mechanism.
  - atmA.F90    - The ATM A component, specializing generic NUOPC_Model.
  - atmB.F90    - The ATM B component, specializing generic NUOPC_Model.
  - ocnA.F90    - The OCN A component, specializing generic NUOPC_Model.
  - ocnB.F90    - The OCN B component, specializing generic NUOPC_Model.
  - esm.F90     - The Earth System Model (ESM) component, specializing generic
                  NUOPC_DriverAtmOcn
  - esmApp.F90  - ESM driver application.
  - esm.config  - ESMF configuration
