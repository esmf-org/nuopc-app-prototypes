README for Generic-Mediator NUOPC prototype
-------------------------------------------

Demonstrate a mediator implementation for a two-way coupled system between
two model components. The mediator implementation is generic in that it 
accepts the model grids during initialzation. It further does not assume 
a fixed number of import and export fields.

Description:

  A two-way coupled system with a single driver, a mediator component, and
  two model components.

  The driver uses explicitly constructed petLists when adding the mediator and
  model components.

  The driver component constructs a custom run sequence to implement coupling
  between the model components through the mediator.
  
  The connector components are explicitly added by the driver.
  
  Both model components use a simple two-phase initialization, consisting of
  advertise and realize.
  
  The mediator component uses a four-phase initialization, consisting of 
  advertise, receive-DistGrid, accept-Grid, and realize.
  

Build:
  - Set environment variable ESMFMKFILE to point to the esmf.mk of your ESMF
    installation.
  - gmake
  
Execution:
  - Optionally set environment variable ESMF_RUNTIME_COMPLIANCECHECK to ON.
  - mpirun -np X ./app (where X is the total number of PETs, typically 4)
  
Output:
  - PET*.Log files containing compliance checker output if turned on.
  - The prototype outputs time stepping information to stdout.

Code structure:
  - Makefile    - Makefile that is based on the standard esmf.mk mechanism.
  - modelA.F90  - The modelA component, specializing generic NUOPC_Model.
  - modelB.F90  - The modelB component, specializing generic NUOPC_Model.
  - mediaotr.F90- The mediator component, specializing generic NUOPC_Mediator.
  - driver.F90  - The driver component, specializing generic NUOPC_Driver.
  - app.F90     - Main application.
