README for ATM-OCN-MED, ingesting run sequence from config file NUOPC prototype
-------------------------------------------------------------------------------

Show how a Driver can ingest a run sequence from config file, potentially 
automatically adding Connector components according to the run sequence.
Demonstrate how to specialize compatibility checking in the components to allow
run sequence switching that changes time lags between components.

Description:

  A two-way coupled system with a single driver (ESM), two model components
  (ATM, OCN), and a mediator (MED).

  The ESM driver reads and ingests a custom run sequence from config file to
  implement coupling between ATM, OCN, and MED components.
  
  The connector components are either explicitly added by the driver, or
  automatically added by the run sequence ingestion method.
  
  ATM, OCN, and MED components use a simple two-phase initialization,
  consisting of advertise and realize.
  
  Two alternative run sequences are provided in the esmApp.runconfig file.
  

Build:
  - Set environment variable ESMFMKFILE to point to the esmf.mk of your ESMF
    installation.
  - gmake
  
Execution:
  - Optionally set environment variable ESMF_RUNTIME_COMPLIANCECHECK to ON.
  - mpirun -np X ./esmApp (where X is the total number of PETs, typically 4)
  
Output:
  - PET*.Log files containing compliance checker output if turned on.
  - The prototype outputs time stepping information to stdout.

Code structure:
  - Makefile    - Makefile that is based on the standard esmf.mk mechanism.
  - atm.F90     - The ATM component, specializing generic NUOPC_Model.
  - ocn.F90     - The OCN component, specializing generic NUOPC_Model.
  - med.F90     - The Mediator component, specializing generic 
                  NUOPC_Mediator.
  - esm.F90     - The Earth System Model (ESM) component, specializing generic
                  NUOPC_Driver. Define partial petLists for ATM, OCN, and MED.
  - esmApp.F90  - ESM application.
