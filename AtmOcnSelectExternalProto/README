README for ATM-OCN Select External NUOPC prototype
--------------------------------------------------

Demonstrate how to implement external component dependencies in NUOPC based
application code. At the same time selection between alternative component
options is shown on the driver level.

Description:

  The term "external components" means that a component is build from source
  outside of the build procedure of the code that actually uses the component.
  The same component object file could be used by multiple applications.
  The external nature of a component is only visible on the build level,
  and does not affect how the component is used from within the calling code.  
  The build level uses GNU makefile fragments to handle external component
  dependencies.
  
  Within each external component subdirectory a Makefile exisits that locally
  builds the component object file, but also produces a file with the extension
  ".mk".  This is a makefile fragment that contains all the necessary 
  information needed to compile and link against the external component.  The
  Makefile of the main application that uses an external component includes the
  makefile fragment and uses the defined variables to express the build rules
  for the depending local source files.
  
  The component selection mechanism inside the driver code is unaffected by
  the fact that some or all components are provided externally.  Two basic 
  selection mechanisms exist:
  1) compile-time selection, e.g. via pre-processor macros
  2) run-time selection, e.g. via configuration file attribute
  Both mechanisms are supported, and can be mixed.
    
  The esm.F90 code is where the selection occurs between atmA, atmB, and atmC,
  as well as between ocnA and ocnB. 
  
  * Selection between atmA, atmB, and atmC is purely a compile-time selection
    based on the FRONT_ATMA, FRONT_ATMB, and FRONT_ATMC macros. The code 
    switches the atmSS association according to these macros and preprocessor
    conditionals are in place to ensure that these three options are mutually
    execlusive.
    
  * Selection between ocnA and ocnB is a combined compile-time and run-time based
    selection. During build time the macros FRONT_OCNA and FRONT_OCNB determine
    which options will be available during run-time. Then during run-time an
    attribute is read from a configuration file and the actual selection between
    ocnA and ocnB is made. An error code is issued if the selection is not 
    available at run-time, e.g. because it was not built into the code during
    compile-time.
    
  * The Makefile contains code that looks at the ATM and OCN variables to
    determine which self-describing component dependency files to inlcude. It
    is in these conditionals where the FRONT_ATMA, FRONT_ATMB, FRONT_ATMC,
    FRONT_OCNA, FRONT_OCNB macros are set.

  This prototype code demonstrates that there is generally no need for 
  component wrappers or stubs in codes that use the NUOPC Layer. Instead the
  flexibility to select actual component instantiation either during 
  compile-time and/or run-time is best implemented using standard constructs
  within the driver layer. The prototype shows a robust implementation that
  catches configuration conflicts at the earliest stage.
  
Build:
  - Set environment variable ESMFMKFILE to point to the esmf.mk of your ESMF
    installation.
  - Manually change into each subdirectory and execute "gmake" to build the 
    local component. Alternatively the "buildSubs.csh" script can be used
    to build all of the external components. This script is only supplied for 
    convenience, not inteded as a template in real-world applications where the
    external components are under their own build mechanism.
  - gmake ATM=B OCN=A,B (or other ATM, OCN settings, see description below)
  
Execution:
  - Optionally set environment variable ESMF_RUNTIME_COMPLIANCECHECK to ON.
  - mpirun -np X ./esmApp (where X is the total number of PETs)
  
Output:
  - PET*.Log files containing compliance checker output if turned on.
  - The prototype outputs time stepping information to stdout.
  
Code structure:
  - Makefile    - Makefile that is based on the standard esmf.mk mechanism.
  - esm.F90     - The Earth System Model (ESM) component, specializing generic
                  NUOPC_Driver.
  - esmApp.F90  - ESM driver application.
  - esm.config  - ESMF configuration
  --> ATM-A     - subdirectory containing an external ATM model, only depending
                  on a single source file.
  --> ATM-B     - subdirectory containing another external ATM model, depending
                  on two source files, both of which are provided as objects.
  --> ATM-C     - subdirectory containing same external ATM model as ATM-B, but
                  this time the objects are provided as a single static archive.
  --> ATM-D     - subdirectory containing an external ATM model, only depending
                  on a single source file. Supply this component in form of a
                  shared library.
  --> ATM-E     - subdirectory containing an external ATM model, only depending
                  on a single source file. Supply this component in form of a
                  shared object.
  --> ATM-F     - subdirectory containing an external ATM model, only depending
                  on a single source file written in C.
  --> OcnModelA - subdirectory containing an external OCN model which depends
                  on some common files in another subdir.
  --> OcnModelB - subdirectory containing another external OCN model which 
                  also depends on the same common files in another subdir but
                  has additional subdir dependencies.
  --> OcnModelC - subdirectory containing another external OCN model which 
                  also depends on the same common files in another subdir but
                  has additional subdir dependencies. Supply this component in
                  form of a shared object with all dependencies linked in.
